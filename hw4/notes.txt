DanleyNemorin

How the data input is represented:
(start p1 3)
(start p2 7)
(p1 p2 1)
(p2 end 11)
(p1 end 22)


For naive-path:

The biggest part of naive-path was the psuedo
code the professor provided.


procedure naive-cost(node) // returns an integer
  if the node has no children, return "infinity".
  for each child of node
    if child is "end"
      just compute (lookup node child)
    else
      compute (lookup node child) + naive-cost(child)
  return the minimum of those computed values

I thought of a list that needed to walk through,
So I spent the most of my time considering how
to parse a list... 

But after taking the 2D table from the book,
I decided to be a bit lazy and "yank" the table by
creating a new procedure. I played around and I realized
that the 2D list would be sufficent enough to walk
through it. Then lazyly enough I decided to create
an extra procedure for the 2Dtable that yanks the table-list
and I will just use the list to do the algorithm.


So in regards to the algorithm I knew that 
once we got for-each, it was another recursion
algorithm that needed to return the minimum
of the values that we're looking for in a specific
node. So I drew the graph and I tried understanding
the psuedo code from there and I was able to understand
how to appraoch it.

Originally my algorithm was going to recieve a list of min
values, and this was because.. I was still very umcomfortable
with recursion algorithms and lists are a way to go.



I created the naive-cost procedure and I had to check
if the node existed within the table, if not it doesn't
throw a large large number - also learned scheme apparently
does BigInt so something superlarge would be sufficent.. I hope

After that, I wanted to get the childlst as that is what would we be
going through. It would provide me the edges that a node have
and for-each would go through it. for-each-node would return
a list of values and I created a minlist, that gets the smallest
value from that list that for-each-node provided.

I should add that after yesterday's class I modified in the design
choice that the professor had since minlist would be a bit too slow
if there's a lot of nodes. Checking to see if a weight is the min
per each iteration of for-each-node is a lot more efficent!.

As for for-each, it was quite simple it's a recursion algorithm that
was going to return a list of scores of each paths. (this was before
the suggestion the prof made). So the base-case of the algorithm
would be an empty list. I simply check to see of childlst is null, if it
is then return the empty list. Then we use let to get the childnode that
is connected to the other node (so like p1->p2, we get p2 is the childnode)

But now, it's return value is an integer which is the most miminal value
as we go through each iteration before we call the for-each-node.

And we also get the weight of the edge, which is called child-weight..
definitely bad naming convention but I don't really want to fix much at the
moment (sorry Professor Offner).

After that we check if the child is the end node, and if it is then
we decide to simply call the function and we put the min's value
between min and child-weight.

so: 
    (for-each-node node (cdr childlst) (min minval child-weight))

If it isn't end then we simply just compute the node, with the naive-cost
of the childnode.

There was some bugs, but it was able to work.

path.scm:

As for this, I only had ennough time to write memoization.
it was quite easy, we can just use a 1D list and the only
thing we need to change is naive-cost. 

Here we add a few checks on cost, because we want to verify
if we've saved the bestcost for the node we're looking for.
If we haven't, then we just do the same algorithm and go into
for-each-node similar to naive-cost.

The check we're looking at is to see if the node is in the list,
if the list returns false then do everything again as I mentioned.
If not, we just take the value from the memolist and we're done.

When it's not, when we get out of the for-each-node that gives us us
the min's value from a node. We then insert it into the memo-list.
This is pretty cool because as we go through looking the shortest
path, we're memoization the information and as we look at
other paths to see if they're the shortest it will eventually be
faster and faster and faster!

I was unable tog et the desire output jsut for lack of time, but 
If I did start this earlier (I know I'm a sinner to my grades)
I think it would've gotten this done a lot faster than
some of the HW I had to do last week.. 

